@model IEnumerable<Orpheus.ViewModels.CartItemViewModel>

@{
    ViewData["Title"] = "Your Cart";
}

<h1 class="mb-4">Your Shopping Cart</h1>

@if (!Model.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <form method="post" asp-controller="Cart" asp-action="UpdateQuantity" id="antiForgeryForm">
        @Html.AntiForgeryToken()
    </form>

    <table class="table table-striped align-middle">
        <thead>
            <tr>
                <th>Item</th>
                <th>Image</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <img src="@(!string.IsNullOrEmpty(item.ImageUrl) ? item.ImageUrl : "/images/default-image.png")"
                             alt="@item.Name"
                             style="width: 80px; height: 80px; object-fit: contain;" />
                    </td>
                    <td>@item.Price.ToString("C")</td>
                    <td>
                        <input type="number"
                               class="form-control form-control-sm me-2 quantity-input"
                               style="width: 70px;"
                               min="1"
                               data-cart-item-id="@item.CartItemId"
                               value="@item.Quantity" />
                    </td>
                    <td>@item.TotalPrice.ToString("C")</td>
                    <td>
                        <form asp-controller="Cart"
                              asp-action="Remove"
                              method="post"
                              asp-route-cartItemId="@item.CartItemId"
                              onsubmit="return confirm('Remove this item from the cart?');">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-danger btn-sm">Remove</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-end">
        <h4>Grand Total: @Model.Sum(i => i.TotalPrice).ToString("C")</h4>
    </div>
}

<div class="mt-3 text-end">
    @if (Model.Any())
    {
        <a href="/Checkout" class="btn btn-primary btn-lg me-2">Proceed to Checkout</a>
    }

    @if (User.Identity.IsAuthenticated)
    {
        <a href="@Url.Action("MyOrders", "Orders")" class="btn btn-secondary btn-lg">
            My Orders
        </a>
    }
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('change', async (e) => {
                const cartItemId = e.target.dataset.cartItemId;
                const quantity = parseInt(e.target.value);
                if (quantity < 1) {
                    e.target.value = 1;
                    return;
                }

                const token = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]').value;

                try {
                    const response = await fetch('/Cart/UpdateQuantity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: `__RequestVerificationToken=${token}&cartItemId=${cartItemId}&quantity=${quantity}`
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to update quantity.');
                    }
                } catch (error) {
                    console.error(error);
                    alert('Error updating quantity.');
                }
            });
        });
    </script>
}